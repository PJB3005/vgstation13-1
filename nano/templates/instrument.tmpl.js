NanoTemplate.preloadTemplate("instrument.tmpl", "<!--\nTitle: instrument view\nUsed In File(s): /code/game/objects/structures/musician.dm\n -->\n<div class=\"item\">\n    <H3>Playback</H3>\n    <div class=\"item\">\n        {{:helper.link(\'Play\', \'\', { \'play\' : 1 })}}\n        {{:helper.link(\'Stop\', \'\', { \'stop\' : 1 })}}\n    </div>\n    <div class=\"item\">\n        Repeat Song:\n        {{:helper.link(\'--\', \'\', { \'repeat\' : -10 })}}\n        {{:helper.link(\'-\', \'\', { \'repeat\' : -1 })}}\n        {{:data.repeat}} times\n        {{:helper.link(\'+\', \'\', { \'repeat\' : 1 })}}\n        {{:helper.link(\'++\', \'\', { \'repeat\' : 10 })}}\n    </div>\n    <div class=\"item\">\n        Tempo: {{:helper.link(\'-\', \'\', { \'tempo\' : data.ticklag })}} {{:data.bpm}} BPM {{:helper.link(\'+\', \'\', { \'tempo\' : -data.ticklag })}}\n    </div>\n</div>\n<div class=\"item\">\n    <H3>Editing</H3>\n    <div class=\"item\">\n        {{:helper.link(\'New Song\', \'\', { \'newsong\' : 1 })}}\n        {{:helper.link(\'Import Song\', \'\', { \'import\' : 1 })}}\n    </div>\n    <div class=\"item\" id=\"lines\">\n    {{:data.lines}}\n    </div>\n    {{:helper.link(\'Add Line\', \'\', { \'newline\' : 1 })}}\n</div>\n<div class=\"item\">\n    <B><button id=\"help_btn\" onclick=\"helpVisibility()\">Hide Help</button></B>\n    <span id=\"help\">\n    <BR>\n    Lines are a series of chords, separated by commas (,), each with notes seperated by hyphens (-).<br>\n    Every note in a chord will play together, with chord timed by the tempo.<br>\n    <br>\n    Notes are played by the names of the note, and optionally, the accidental, and/or the octave number.<br>\n    By default, every note is natural and in octave 3. Defining otherwise is remembered for each note.<br>\n    Example: <i>C,D,E,F,G,A,B</i> will play a C major scale.<br>\n    After a note has an accidental placed, it will be remembered: <i>C,C4,C,C3</i> is C3,C4,C4,C3</i><br>\n    Chords can be played simply by seperating each note with a hyphon: <i>A-C#,Cn-E,E-G#,Gn-B</i><br>\n    A pause may be denoted by an empty chord: <i>C,E,,C,G</i><br>\n    To make a chord be a different time, end it with /x, where the chord length will be length<br>\n    defined by tempo / x: <i>C,G/2,E/4</i><br>\n    Combined, an example is: <i>E-E4/4,F#/2,G#/8,B/8,E3-E4/4</i>\n    <br>\n    Lines may be up to 50 characters.<br>\n    A song may only contain up to 50 lines.<br>\n    </span>\n</div>\n<script>\nvar prevChord = \"\";\nvar highlightClass = \"activeChord\";\nvar helpvis = 0;\nvar src_ref = \"{{:data.src}}\";\n\nfunction renderLines(lines){\n    var result = \"<table>\";\n    for (i = 0; i < lines.length; i++) { \n        var curLine = lines[i].split(\",\");\n        var htmlLine = [];\n        for(j = 0; j < curLine.length; j++){\n            htmlLine.push(\"<div class=\'chord\' id=\'chord_\"+(i+1)+\"_\"+(j+1)+\"\'>\"+curLine[j]+\"</div>\");\n        }\n\n        buttons = \"<div class=\\\"link linkActive\\\" data-href=\\\"?src=\"+src_ref+\";modifyline=\"+(i+1)+\"\\\">Modify</div>\";\n        buttons += \"<div class=\\\"link linkActive\\\" data-href=\\\"?src=\"+src_ref+\";deleteline=\"+(i+1)+\"\\\">Delete</div>\";\n        if(i != 0){\n            buttons += \"<div class=\\\"link linkActive\\\" data-href=\\\"?src=\"+src_ref+\";moveline=\"+(i+1)+\";dir=-1\\\">Up</div>\";\n        }\n        if(i < lines.length-1){\n            buttons += \"<div class=\\\"link linkActive\\\" data-href=\\\"?src=\"+src_ref+\";moveline=\"+(i+1)+\";dir=1\\\">Down</div>\";\n        }\n\n        result += \"<tr><td>Line \"+(i+1)+\": </td><td>\"+htmlLine.join(\"\")+\"</td><td>\"+buttons+\"</td></tr>\";\n    }\n    result += \"</table>\";\n    $(\"#lines\").html(result);\n}\n\nfunction activeChord(lineIndex, chordIndex){\n    var id = \"#chord_\"+lineIndex+\"_\"+chordIndex;\n    if(prevChord == \"\"){\n        prevChord = id;\n        $(id).addClass(highlightClass);\n    }\n\n    if(prevChord != id){\n        $(prevChord).removeClass(highlightClass);\n        $(id).addClass(highlightClass);\n        prevChord = id;\n    }\n}\n\nfunction helpVisibility(){\n    if(helpvis == 1){\n        $(\"#help\").show();\n        $(\"#help_btn\").text(\"Hide Help\");\n        helpvis = 0;\n    }else{\n        $(\"#help\").hide();\n        $(\"#help_btn\").text(\"Show Help\");\n        helpvis = 1;\n    }\n}\n\nfunction messageReceived(){\n    $(\'.linkActive\').stopTime(\'linkPending\');\n    $(\'.linkActive\').removeClass(\'linkPending\');\n    $(\'.buttonActive\').stopTime(\'linkPending\');\n    $(\'.buttonActive\').removeClass(\'linkPending\');\n}\n\nvar lines = $.parseJSON($(\"#lines\").text());\nrenderLines(lines);\n</script>");